#  Рекурсивная функция — это такая функция, которая в процессе выполнения вызывает саму себя.
#  Недостатки рекурсии:
#  Риск переполнения.
#  Риск бесконечности


#  Итерационный, или пошаговый, способ решения задачи
def summa(n):
    x = 0
    for i in range(1, n+1):
        x += i

    return x


print(summa(5))


#  Рекурсивный способ
def summa(n):
    if n == 1:
        return 1

    return n + summa(n-1)

print(summa(5))


"""
summa(5) == 5 + summa(4)
summa(4) == 4 + summa(3)
summa(3) == 3 + summa(2)
summa(2) == 2 + summa(1)
summa(1) == 1

summa(5) == 5 + ( 4 + (3 + (2 + (1))))
"""


def factorial(n):
    if n <= 0:  #  условие, которое прекращает рекурсию
        return 1

    return n * factorial(n-1)


print(factorial(5))



#  Линейная рекурсия
#  Гипотеза Коллатца - Берём любое натуральное число n.
#  Если оно чётное, то делим его на 2, а если нечётное, то умножаем на 3 и прибавляем 1 (получаем 3n + 1).
#  Над полученным числом выполняем те же самые действия, и так далее.
#  Гипотеза Коллатца заключается в том, что какое бы начальное число n мы ни взяли, рано или поздно мы получим единицу
#  в теле функции есть два рекурсивных вызова, но в каждом заходе используется только один.
def collatz(n):
    if n == 1:
        return True

    if n % 2 == 0:
        return collatz(n // 2)

    return collatz(n * 3 + 1)


print(collatz(10))


#  При рекурсивной обработке коллекции можно представить коллекцию как начало (голову)
#  и остальную часть коллекции (хвост). Дальше хвост также можно разложить на голову и новый хвост.
#  И так до тех пор, пока не останется голова и пустой хвост
#  [1, 2, 3] ->
#  [1, [2, 3]] ->
#  [1, [2, [3]]] ->
#  [1, [2, [3, []]]]
def sum(array):
    head, *tail = array  #  оператор * для записи в хвост остальной части списка
    if not tail:
        return head

    return head + sum(tail)


print(sum([1, 2, 3, 4, 5, 6]))


#  Каскадная рекурсия
#  Функция всегда вызывает себя два раза.
#  Сначала будет 2 вызова, которые превратятся в 4. Затем в 8 — количество вызовов растет каскадно.
def fibonacci(n):
    if n <= 2:
        return 1

    return fibonacci(n-1) + fibonacci(n-2)

print(fibonacci(10))
