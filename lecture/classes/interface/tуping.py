"""
Типизация – это способ защититься от использования объектов одного класса вместо другого или, по крайней мере, управлять
таким использованием.

Утиная типизация – это концепция, характерная для языков программирования с динамической типизацией, согласно которой
конкретный тип или класс объекта не важен, а важны лишь свойства и методы, которыми этот объект обладает.
Другими словами, при работе с объектом его тип не проверяется, вместо этого проверяются свойства и методы этого объекта.
Такой подход добавляет гибкости коду, позволяет полиморфно работать с объектами, которые никак не связаны друг с другом
и могут быть объектами разных классов. Единственное условие, чтобы все эти объекты поддерживали необходимый набор
свойств и методов.
"""


class Meter:
    def __len__(self):
        return 1000


print(len([1, 2, 3]))

print(len("Duck typing..."))

print(len(Meter()))

"""
В примере выше функции len не важен тип аргумента, а важно лишь то, что у объекта можно вызвать метод __len__().
Но именно эта гибкость и усложняет раннее обнаружение ошибок типизации. Корректность использования объектов определяется
динамически, в момент выполнения программы, и зачастую тестирование – единственный способ отловить подобные ошибки. 
Статическая проверка типов и корректности программы в данном случае представляет значительную сложность.
"""