"""
Принцип инверсии зависимостей (DIP)

Модули верхних уровней не должны зависеть от модулей нижних уровней. Оба типа модулей должны зависеть от абстракций.
Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.
"""

from abc import ABC, abstractmethod

"""
Чтобы устранить проблему, вы можете применить принцип инверсии зависимостей и заставить ваши классы зависеть от 
абстракций, а не от конкретных реализаций, таких как серверная часть. В этом конкретном примере вы можете ввести класс 
DataSource, который предоставляет интерфейс для использования в ваших конкретных классах. Класс DataSource в качестве
абстракции предоставляет необходимый интерфейс, или метод .get_data(). Обратите внимание, что интерфейс теперь зависит
от интерфейса, предоставляемого DataSource, который является абстракцией.

Затем вы определяете класс базы данных, который является конкретной реализацией для тех случаев, когда вы хотите 
получить данные из своей базы данных. Этот класс зависит от абстракции источника данных посредством наследования. 
Наконец, вы определяете класс API для поддержки извлечения данных из REST API. Этот класс также зависит от абстракции 
источника данных.
"""


class FrontEnd:
    def __init__(self, data_source):
        self.data_source = data_source

    def display_data(self):
        data = self.data_source.get_data()
        print("Display data:", data)


class DataSource(ABC):
    @abstractmethod
    def get_data(self):
        pass


class Database(DataSource):
    def get_data(self):
        return "Data from the database"


class API(DataSource):
    def get_data(self):
        return "Data from the API"


"""
Здесь вы сначала инициализируете интерфейс, используя объект базы данных, а затем снова используя объект API. 
Каждый раз, когда вы вызываете .display_data(), результат будет зависеть от конкретного источника данных, который вы 
используете. Обратите внимание, что вы также можете динамически изменять источник данных, переназначая атрибут 
.data_source в вашем экземпляре интерфейса.
"""
db_front_end = FrontEnd(Database())
db_front_end.display_data()


api_front_end = FrontEnd(API())
api_front_end.display_data()
