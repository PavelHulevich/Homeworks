"""
Например, если у вас есть фрагмент кода, который работает с классом Shape, то вы должны иметь возможность заменить этот
класс любым из его подклассов, таких как Circle или Rectangle, не нарушая код.
На практике этот принцип заключается в том, чтобы заставить ваши подклассы вести себя так же, как их базовые классы,
не нарушая ничьих ожиданий, когда они вызывают одни и те же методы. Чтобы продолжить рассмотрение примеров, связанных с
формой, допустим, у вас есть класс Rectangle, подобный следующему:
"""


class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def calculate_area(self):
        return self.width * self.height


"""
Поскольку квадрат является частным случаем прямоугольника с равными сторонами, вы думаете о том, чтобы вывести класс 
Square из Rectangle, чтобы повторно использовать код.
Инициализатор класса принимает в качестве аргумента только сторону квадрата. метод _init__() инициализирует родительские 
атрибуты .width и .height с помощью побочного аргумента.
Вы также определили специальный метод .__setattr__(), который подключается к механизму установки атрибутов Python и 
перехватывает присвоение нового значения атрибуту .width или .height. В частности, когда вы устанавливаете один из этих 
атрибутов, другому атрибуту также присваивается то же значение:
"""


class Square(Rectangle):

    def __init__(self, side):
        super().__init__(side, side)

    def __setattr__(self, key, value):
        super().__setattr__(key, value)
        if key in ("width", "height"):
            self.__dict__["width"] = value
            self.__dict__["height"] = value


square = Square(5)
print(vars(square))

square.width = 7
print(vars(square))

square.height = 9
print(vars(square))


"""
Теперь вы убедились, что квадратный объект всегда остается допустимым квадратом, что облегчает вашу жизнь за небольшую 
плату в виде небольшого количества потраченной впустую памяти. К сожалению, это нарушает принцип подстановки Лисков, 
поскольку вы не можете заменить экземпляры Rectangle их квадратными аналогами.
"""