"""
принцип замещения Лисков (LSP), гласит что подтипы должны быть заменяемыми для своих базовых типов.
Простыми словами принцип звучит так: Наследующий класс должен дополнять, а не замещать поведение базового класса.

Если у нас есть класс A и отнаследованный от него класс B, то если мы заменим все использования класса A на B,
ничего не должно измениться в работе программы. Ведь класс B всего лишь расширяет функционал класса A. Если эта
проверка работает, то программа соответствует принципу подстановки Лисков!
"""
from abc import ABC, abstractmethod

"""
квадрат - это особый тип прямоугольника в математике, классы, представляющие эти фигуры, не должны находиться в 
отношениях "родитель-потомок", если вы хотите, чтобы они соответствовали принципу замещения Лисков. Одним из способов 
решения этой проблемы является создание базового класса как для Rectangle, так и для Square для расширения:
"""


class Shape(ABC):
    @abstractmethod
    def calculate_area(self):
        pass


class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def calculate_area(self):
        return self.width * self.height


class Square(Shape):
    def __init__(self, side):
        self.side = side

    def calculate_area(self):
        return self.side ** 2


"""
Форма становится типом, который вы можете заменить с помощью полиморфизма либо прямоугольником, либо квадратом, которые 
теперь являются братьями и сестрами, а не родителем и дочерним элементом. Обратите внимание, что оба конкретных типа 
фигур имеют разные наборы атрибутов, разные методы инициализации и потенциально могут реализовывать еще более раздельное
поведение. Единственное, что у них есть общего, - это способность вычислять их площадь.
"""
