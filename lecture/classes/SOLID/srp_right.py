"""
Принцип единой ответственности (SRP) исходит от Роберта К. Мартина, более известного под прозвищем Дядя Боб, который
является уважаемой фигурой в мире разработки программного обеспечения и одним из первых подписантов манифеста Agile.
Фактически, он ввел в обиход термин "SOLID".
Принцип единой ответственности гласит, что: у класса должна быть только одна причина для изменения.
Это означает, что у класса должна быть только одна ответственность, выраженная через его методы. Если класс выполняет
 более одной задачи, то вам следует разделить эти задачи на отдельные классы.
Это наиболее часто цитируемое определение принципа и оно крайне туманно. Проблема в том, что никто точно не понимает,
что есть причина для изменений. Отсюда возникают различные субъективные трактовки «причины», а также стойкое ощущение
того, что применение принципа единственной ответственности в разработке ПО это удел матёрых архитекторов.
По видимому, Дядя Боб в какой-то момент пришёл к тому же выводу и поэтому в своей недавней книге Clean Architecture
даёт новое определение этого принципа:
Модуль должен отвечать перед одним и только одним актором.
Под актором здесь понимается группа, состоящая из одного или нескольких лиц, желающих изменения поведения программного
модуля.
Это определение гораздо лучше предыдущего, т.к., во-первых, оно акцентирует внимание не на классе, а на модуле, что явно
указывает на то, что SRP применим к любой части системы и не зависит от используемой парадигмы программирования.
"""

from pathlib import Path
from zipfile import ZipFile


class FileManager:
    def __init__(self, filename):
        self.path = Path(filename)

    def read(self, encoding="utf-8"):
        return self.path.read_text(encoding)

    def write(self, data, encoding="utf-8"):
        self.path.write_text(data, encoding)


class ZipFileManager:
    def __init__(self, filename):
        self.path = Path(filename)

    def compress(self):
        with ZipFile(self.path.with_suffix(".zip"), mode="w") as archive:
            archive.write(self.path)

    def decompress(self):
        with ZipFile(self.path.with_suffix(".zip"), mode="r") as archive:
            archive.extractall()


"""
Теперь у вас есть два меньших класса, каждый из которых несет только одну ответственность. Файловый менеджер заботится 
об управлении файлом, в то время как ZipFileManager обрабатывает сжатие и распаковку файла с использованием формата ZIP.
Эти два класса меньше по размеру, поэтому ими легче управлять. Кроме того, о них легче рассуждать, тестировать и 
отлаживать.
Концепция ответственности в этом контексте может быть довольно субъективной. Наличие единой ответственности не 
обязательно означает наличие единого метода. Ответственность напрямую связана не с количеством методов, а с основной 
задачей, за которую отвечает ваш класс, в зависимости от вашего представления о том, что класс представляет в вашем 
коде.
"""