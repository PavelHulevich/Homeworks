import random
import copy

#  Создание пустого списка
empty_list = list()
print(empty_list)

#  Создание пустого списка с помощью литерала
empty_list = []
print(empty_list)

#  Создание списка
not_empty_list = list('Python')
print(not_empty_list)

not_empty_list = [1, 2, 3]
print(not_empty_list)

#  Списки состоят из объектов разного типа
l = ['a', 1, True, (1, 2, 3)]
print(l)

#  Генерация списка с помощью цикла
s1 = [i for i in range(1, 11)]
print(s1)

#  Заполнить список 5 случайными числами из диапазона от 1 до 10
n = 5
s = [random.randint(1, 20) for i in range(n)]
print(s)


#  Получение элемента списка по номеру
s = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(s[1])
print(s[-1])

#  сложение элементов
a = s[0] + s[2]
print(a)

#  Срезы в списках
#  list[start:end:step]

a = [1, 2, 3, 4, 5, 6, 7]
print(a[1])      # 2
print(a[1:])     # [2, 3, 4, 5, 6, 7]
print(a[1:4])    # [2, 3, 4]
print(a[1:5:2])  # [2, 4]
print(a[:3])     # [1, 2, 3]

#  Изменение элемента списка по номеру
s = [1, 2, 3, 4]
s[1] = 'New item'
print(s)


print(min([1, 2, 3, 4]))  # поиск минимального элемента
print(max([1, 2, 3, 4]))  # поиск максимального элемента

#  Поиск максимального и минимального элемента выполняется в случае, если все элементы списка одного общего типа,
#  т. е. либо они все являются числами (неважно, целыми или дробными), либо все являются символами.
print(min(['1', '2', '3', '4']))
print(max(['1', '2', '3', '4']))
#  print(max([1,2,3,"str"]))

#  Количество элементов в списке
print(len([1, 2, 3, 4, 5]))

#  Добавить элемент в конец списка
s = [6, 7, 7,7, 8, 9, 0, 0]
s.append('item')
print(s)

#  list.extend(L) расширяет список list, добавляя в конец все элементы списка L
s.extend(['new item', 2])
print(s)

#  list.insert(i, x) вставляет на i-ое место значение x, сдвигая все значения после него вперед (вправо).
s.insert(0, 'new new item')
print(s)

#  list.remove(x) удаляет первый элемент в списке, имеющий значение x.
s.remove(0)
print(s)
s.remove(0)
print(s)

#  list.pop([i]) удаляет i-ый элемент и возвращает его значение. Если индекс не указан, удаляется последний элемент.
first = s.pop(1)
print(s)
print(first)

#  list.count(x) возвращает количество элементов со значением x.
print(s.count(7))

#  list.sort() сортирует список на основе функции. По умолчанию сортирует список в алфавитном порядке (для чисел – по возрастанию).
s = [1, 2, 3, 2, 5, 6, 2, 5, 7, 2]
s.sort()
print(s)

#  отсортировать в обратном порядке
s.sort(reverse=True)
print(s)

#  отсортировать список, используя кастомную функцию
l = [(2, 2), (3, 4), (4, 1), (1, 3)]
def take_second(elem):
    return elem[1]


l.sort(key=take_second)
print(l)


#  list.reverse() симметрично переворачивает список
s.reverse()
print(s)

#  list.copy() копия списка, создается новый составной объект со ссылками на объекты, находящиеся в оригинале.
s = [1, 2, 3, 2, 5, 6, 2, 5, 7, 2]
b = s.copy()
print(b)

#  альтернатива
d = copy.deepcopy(s)
print(d)

#  при изменении оригинального списка, списки, созданные с помощью .copy() и copy.deepcopy() не меняются
print(s)
print(b)
print(d)

s[0] = 11
print(s)
print(b)
print(d)

#  list.clear() очищает список.
s.clear()


#  Контроль границ
L = [123, 'spam', 'N1']
try:
    print(L[99])
except IndexError:
    pass

try:
    L[99] = 1
except IndexError:
    pass


#  Многомерные списки
a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
a = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
]

#  Обращение к конкретному элементу многомерного списка
print(a[0][1])

try:
    print(a[10][1])
except IndexError:
    pass


#  Обработка элементов двумерного списка
s = 0
for i in range(len(a)):
    for j in range(len(a[i])):
        s += a[i][j]
print(s)

s = 0
for row in a:
    for column in row:
        s += column
print(s)

#  Многомерные списки произвольной вложенности
a = [[[[]], 2, 3], [4, 5, 6], [7, 8, 9]]


a = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
]

#  Списковые включения
#  Получаем новый список состоящий из второго столбца двумерного массива с помощью спискового включения (генератора списков)
col2 = [row[1] for row in a]
print(col2)

#  Получаем новый список на основе другого списка меняя значение элемента с помощью спискового включения (генератора списков)
b = [row[1] + 1 for row in a]
print(b)

#  Получаем новый список на основе другого списка меняя значение элемента и фильтруя определенные значения
#  с помощью спискового включения (генератора списков)
c = [row[1] + 1 for row in a if row[1] % 2 == 0]
print(c)
